

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Tue Feb 11 20:07:09 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F1455
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     	;# 
    20  0001                     	;# 
    21  0002                     	;# 
    22  0003                     	;# 
    23  0004                     	;# 
    24  0005                     	;# 
    25  0006                     	;# 
    26  0007                     	;# 
    27  0008                     	;# 
    28  0009                     	;# 
    29  000A                     	;# 
    30  000B                     	;# 
    31  000C                     	;# 
    32  000E                     	;# 
    33  0011                     	;# 
    34  0012                     	;# 
    35  0015                     	;# 
    36  0016                     	;# 
    37  0016                     	;# 
    38  0017                     	;# 
    39  0018                     	;# 
    40  0019                     	;# 
    41  001A                     	;# 
    42  001B                     	;# 
    43  001C                     	;# 
    44  008C                     	;# 
    45  008E                     	;# 
    46  0091                     	;# 
    47  0092                     	;# 
    48  0095                     	;# 
    49  0096                     	;# 
    50  0097                     	;# 
    51  0098                     	;# 
    52  0099                     	;# 
    53  009A                     	;# 
    54  009B                     	;# 
    55  009B                     	;# 
    56  009C                     	;# 
    57  009D                     	;# 
    58  009E                     	;# 
    59  009F                     	;# 
    60  010C                     	;# 
    61  010E                     	;# 
    62  0111                     	;# 
    63  0112                     	;# 
    64  0113                     	;# 
    65  0114                     	;# 
    66  0115                     	;# 
    67  0116                     	;# 
    68  0117                     	;# 
    69  0118                     	;# 
    70  0119                     	;# 
    71  011D                     	;# 
    72  018C                     	;# 
    73  018E                     	;# 
    74  0191                     	;# 
    75  0191                     	;# 
    76  0192                     	;# 
    77  0193                     	;# 
    78  0193                     	;# 
    79  0194                     	;# 
    80  0195                     	;# 
    81  0196                     	;# 
    82  0197                     	;# 
    83  0199                     	;# 
    84  019A                     	;# 
    85  019B                     	;# 
    86  019B                     	;# 
    87  019C                     	;# 
    88  019D                     	;# 
    89  019E                     	;# 
    90  019F                     	;# 
    91  020C                     	;# 
    92  0211                     	;# 
    93  0211                     	;# 
    94  0212                     	;# 
    95  0212                     	;# 
    96  0213                     	;# 
    97  0213                     	;# 
    98  0214                     	;# 
    99  0214                     	;# 
   100  0215                     	;# 
   101  0215                     	;# 
   102  0215                     	;# 
   103  0216                     	;# 
   104  0216                     	;# 
   105  0217                     	;# 
   106  0217                     	;# 
   107  0391                     	;# 
   108  0392                     	;# 
   109  0393                     	;# 
   110  039A                     	;# 
   111  039B                     	;# 
   112  0611                     	;# 
   113  0612                     	;# 
   114  0613                     	;# 
   115  0613                     	;# 
   116  0614                     	;# 
   117  0615                     	;# 
   118  0616                     	;# 
   119  0616                     	;# 
   120  0691                     	;# 
   121  0692                     	;# 
   122  0693                     	;# 
   123  0694                     	;# 
   124  0695                     	;# 
   125  0E8E                     	;# 
   126  0E8F                     	;# 
   127  0E90                     	;# 
   128  0E91                     	;# 
   129  0E92                     	;# 
   130  0E93                     	;# 
   131  0E94                     	;# 
   132  0E94                     	;# 
   133  0E95                     	;# 
   134  0E96                     	;# 
   135  0E97                     	;# 
   136  0E98                     	;# 
   137  0E99                     	;# 
   138  0E9A                     	;# 
   139  0E9B                     	;# 
   140  0E9C                     	;# 
   141  0E9D                     	;# 
   142  0E9E                     	;# 
   143  0E9F                     	;# 
   144  0FE4                     	;# 
   145  0FE5                     	;# 
   146  0FE6                     	;# 
   147  0FE7                     	;# 
   148  0FE8                     	;# 
   149  0FE9                     	;# 
   150  0FEA                     	;# 
   151  0FEB                     	;# 
   152  0FED                     	;# 
   153  0FEE                     	;# 
   154  0FEF                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000E                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  008C                     	;# 
   181  008E                     	;# 
   182  0091                     	;# 
   183  0092                     	;# 
   184  0095                     	;# 
   185  0096                     	;# 
   186  0097                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009A                     	;# 
   190  009B                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  009F                     	;# 
   196  010C                     	;# 
   197  010E                     	;# 
   198  0111                     	;# 
   199  0112                     	;# 
   200  0113                     	;# 
   201  0114                     	;# 
   202  0115                     	;# 
   203  0116                     	;# 
   204  0117                     	;# 
   205  0118                     	;# 
   206  0119                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  018E                     	;# 
   210  0191                     	;# 
   211  0191                     	;# 
   212  0192                     	;# 
   213  0193                     	;# 
   214  0193                     	;# 
   215  0194                     	;# 
   216  0195                     	;# 
   217  0196                     	;# 
   218  0197                     	;# 
   219  0199                     	;# 
   220  019A                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019C                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019F                     	;# 
   227  020C                     	;# 
   228  0211                     	;# 
   229  0211                     	;# 
   230  0212                     	;# 
   231  0212                     	;# 
   232  0213                     	;# 
   233  0213                     	;# 
   234  0214                     	;# 
   235  0214                     	;# 
   236  0215                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0216                     	;# 
   240  0216                     	;# 
   241  0217                     	;# 
   242  0217                     	;# 
   243  0391                     	;# 
   244  0392                     	;# 
   245  0393                     	;# 
   246  039A                     	;# 
   247  039B                     	;# 
   248  0611                     	;# 
   249  0612                     	;# 
   250  0613                     	;# 
   251  0613                     	;# 
   252  0614                     	;# 
   253  0615                     	;# 
   254  0616                     	;# 
   255  0616                     	;# 
   256  0691                     	;# 
   257  0692                     	;# 
   258  0693                     	;# 
   259  0694                     	;# 
   260  0695                     	;# 
   261  0E8E                     	;# 
   262  0E8F                     	;# 
   263  0E90                     	;# 
   264  0E91                     	;# 
   265  0E92                     	;# 
   266  0E93                     	;# 
   267  0E94                     	;# 
   268  0E94                     	;# 
   269  0E95                     	;# 
   270  0E96                     	;# 
   271  0E97                     	;# 
   272  0E98                     	;# 
   273  0E99                     	;# 
   274  0E9A                     	;# 
   275  0E9B                     	;# 
   276  0E9C                     	;# 
   277  0E9D                     	;# 
   278  0E9E                     	;# 
   279  0E9F                     	;# 
   280  0FE4                     	;# 
   281  0FE5                     	;# 
   282  0FE6                     	;# 
   283  0FE7                     	;# 
   284  0FE8                     	;# 
   285  0FE9                     	;# 
   286  0FEA                     	;# 
   287  0FEB                     	;# 
   288  0FED                     	;# 
   289  0FEE                     	;# 
   290  0FEF                     	;# 
   291                           
   292                           	psect	idataBANK0
   293  030C                     __pidataBANK0:	
   294                           
   295                           ;initializer for _checkBattery
   296  030C  3401               	retlw	1
   297                           
   298                           ;initializer for _leftDir
   299  030D  3401               	retlw	1
   300                           
   301                           ;initializer for _rightDir
   302  030E  3401               	retlw	1
   303                           
   304                           	psect	strings
   305  0308                     __pstrings:	
   306  0308                     __stringtab:	
   307  0308  3400               	retlw	0
   308  0309                     __end_of__stringtab:	
   309  0309                     _CUTOFF_VOLTAGE:	
   310  0309  3400               	retlw	0
   311  030A  34B0               	retlw	176
   312  030B                     __end_of_CUTOFF_VOLTAGE:	
   313  030B                     _SPEED_INCREMENTS:	
   314  030B  3408               	retlw	8
   315  030C                     __end_of_SPEED_INCREMENTS:	
   316  008E                     _ADIF	set	142
   317  005F                     _GIE	set	95
   318  005E                     _PEIE	set	94
   319  008D                     _RCIF	set	141
   320  008C                     _TXIF	set	140
   321  009B                     _ADRES	set	155
   322  009D                     _ADCON0bits	set	157
   323  009E                     _ADCON1bits	set	158
   324  0099                     _OSCCONbits	set	153
   325  008C                     _TRISAbits	set	140
   326  008E                     _TRISCbits	set	142
   327  04E9                     _ADGO	set	1257
   328  048E                     _ADIE	set	1166
   329  04E8                     _ADON	set	1256
   330  048D                     _RCIE	set	1165
   331  0474                     _TRISC4	set	1140
   332  0475                     _TRISC5	set	1141
   333  010C                     _LATA	set	268
   334  010C                     _LATAbits	set	268
   335  010E                     _LATC	set	270
   336  010E                     _LATCbits	set	270
   337  019B                     _SPBRG	set	411
   338  018C                     _ANSELA	set	396
   339  018C                     _ANSELAbits	set	396
   340  018E                     _ANSELC	set	398
   341  0199                     _RCREG	set	409
   342  019D                     _RCSTA	set	413
   343  019A                     _TXREG	set	410
   344  019E                     _TXSTA	set	414
   345  0CF5                     _TXEN	set	3317
   346                           
   347                           ; #config settings
   348  0000                     
   349                           	psect	cinit
   350  004E                     start_initialization:	
   351  004E                     __initialization:	
   352                           
   353                           ; Clear objects allocated to COMMON
   354  004E  01F8               	clrf	__pbssCOMMON& (0+127)
   355  004F  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   356                           
   357                           ; Clear objects allocated to BANK0
   358  0050  01B6               	clrf	__pbssBANK0& (0+127)
   359  0051  01B7               	clrf	(__pbssBANK0+1)& (0+127)
   360  0052  01B8               	clrf	(__pbssBANK0+2)& (0+127)
   361  0053  01B9               	clrf	(__pbssBANK0+3)& (0+127)
   362  0054  01BA               	clrf	(__pbssBANK0+4)& (0+127)
   363  0055  01BB               	clrf	(__pbssBANK0+5)& (0+127)
   364  0056  01BC               	clrf	(__pbssBANK0+6)& (0+127)
   365  0057  01BD               	clrf	(__pbssBANK0+7)& (0+127)
   366  0058  01BE               	clrf	(__pbssBANK0+8)& (0+127)
   367  0059  01BF               	clrf	(__pbssBANK0+9)& (0+127)
   368  005A  01C0               	clrf	(__pbssBANK0+10)& (0+127)
   369                           
   370                           ; Initialize objects allocated to BANK0
   371  005B  3183  230C  3180   	fcall	__pidataBANK0	;fetch initializer
   372  005E  00C1               	movwf	__pdataBANK0& (0+127)
   373  005F  3183  230D  3180   	fcall	__pidataBANK0+1	;fetch initializer
   374  0062  00C2               	movwf	(__pdataBANK0+1)& (0+127)
   375  0063  3183  230E         	fcall	__pidataBANK0+2	;fetch initializer
   376  0065  00C3               	movwf	(__pdataBANK0+2)& (0+127)
   377  0066                     end_of_initialization:	
   378                           ;End of C runtime variable initialization code
   379                           
   380  0066                     __end_of__initialization:	
   381  0066  0020               	movlb	0
   382  0067  3180  2869         	ljmp	_main	;jump to C main() function
   383                           
   384                           	psect	bssCOMMON
   385  0078                     __pbssCOMMON:	
   386  0078                     _i:	
   387  0078                     	ds	1
   388  0079                     _rxchar:	
   389  0079                     	ds	1
   390                           
   391                           	psect	bssBANK0
   392  0036                     __pbssBANK0:	
   393  0036                     _packetBuffer:	
   394  0036                     	ds	6
   395  003C                     _batteryLow:	
   396  003C                     	ds	1
   397  003D                     _leftPWM:	
   398  003D                     	ds	1
   399  003E                     _packetCorrupt:	
   400  003E                     	ds	1
   401  003F                     _packetReceived:	
   402  003F                     	ds	1
   403  0040                     _rightPWM:	
   404  0040                     	ds	1
   405                           
   406                           	psect	dataBANK0
   407  0041                     __pdataBANK0:	
   408  0041                     _checkBattery:	
   409  0041                     	ds	1
   410  0042                     _leftDir:	
   411  0042                     	ds	1
   412  0043                     _rightDir:	
   413  0043                     	ds	1
   414                           
   415                           	psect	cstackCOMMON
   416  0070                     __pcstackCOMMON:	
   417  0070                     ??_getch:	
   418  0070                     ?_ISR:	
   419                           ; 0 bytes @ 0x0
   420                           
   421  0070                     ??_ISR:	
   422                           ; 0 bytes @ 0x0
   423                           
   424  0070                     ?_setup:	
   425                           ; 0 bytes @ 0x0
   426                           
   427  0070                     ?_checkBatteryVoltage:	
   428                           ; 0 bytes @ 0x0
   429                           
   430  0070                     ?_main:	
   431                           ; 0 bytes @ 0x0
   432                           
   433  0070                     ?_getch:	
   434                           ; 0 bytes @ 0x0
   435                           
   436                           
   437                           ; 1 bytes @ 0x0
   438  0070                     	ds	3
   439  0073                     ??_setup:	
   440  0073                     ??_checkBatteryVoltage:	
   441                           ; 0 bytes @ 0x3
   442                           
   443  0073                     ?___awdiv:	
   444                           ; 0 bytes @ 0x3
   445                           
   446  0073                     ___awdiv@divisor:	
   447                           ; 2 bytes @ 0x3
   448                           
   449                           
   450                           ; 2 bytes @ 0x3
   451  0073                     	ds	2
   452  0075                     ___awdiv@dividend:	
   453                           
   454                           ; 2 bytes @ 0x5
   455  0075                     	ds	2
   456  0077                     ??___awdiv:	
   457                           
   458                           ; 0 bytes @ 0x7
   459  0077                     	ds	1
   460                           
   461                           	psect	cstackBANK0
   462  0020                     __pcstackBANK0:	
   463  0020                     ___awdiv@counter:	
   464                           
   465                           ; 1 bytes @ 0x0
   466  0020                     	ds	1
   467  0021                     ___awdiv@sign:	
   468                           
   469                           ; 1 bytes @ 0x1
   470  0021                     	ds	1
   471  0022                     ___awdiv@quotient:	
   472                           
   473                           ; 2 bytes @ 0x2
   474  0022                     	ds	2
   475  0024                     ??_main:	
   476                           
   477                           ; 0 bytes @ 0x4
   478  0024                     	ds	4
   479  0028                     main@leftPWMtemp:	
   480                           
   481                           ; 2 bytes @ 0x8
   482  0028                     	ds	2
   483  002A                     main@rightPWMtemp:	
   484                           
   485                           ; 2 bytes @ 0xA
   486  002A                     	ds	2
   487  002C                     main@xAbs:	
   488                           
   489                           ; 2 bytes @ 0xC
   490  002C                     	ds	2
   491  002E                     main@yAbs:	
   492                           
   493                           ; 2 bytes @ 0xE
   494  002E                     	ds	2
   495  0030                     main@pwmCount:	
   496                           
   497                           ; 2 bytes @ 0x10
   498  0030                     	ds	2
   499  0032                     main@x:	
   500                           
   501                           ; 2 bytes @ 0x12
   502  0032                     	ds	2
   503  0034                     main@y:	
   504                           
   505                           ; 2 bytes @ 0x14
   506  0034                     	ds	2
   507                           
   508                           	psect	maintext
   509  0069                     __pmaintext:	
   510 ;;
   511 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   512 ;;
   513 ;; *************** function _main *****************
   514 ;; Defined at:
   515 ;;		line 148 in file "main.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;		None
   518 ;; Auto vars:     Size  Location     Type
   519 ;;  y               2   20[BANK0 ] int 
   520 ;;  x               2   18[BANK0 ] int 
   521 ;;  pwmCount        2   16[BANK0 ] int 
   522 ;;  yAbs            2   14[BANK0 ] int 
   523 ;;  xAbs            2   12[BANK0 ] int 
   524 ;;  rightPWMtemp    2   10[BANK0 ] int 
   525 ;;  leftPWMtemp     2    8[BANK0 ] int 
   526 ;; Return value:  Size  Location     Type
   527 ;;		None               void
   528 ;; Registers used:
   529 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   530 ;; Tracked objects:
   531 ;;		On entry : 17F/0
   532 ;;		On exit  : 0/0
   533 ;;		Unchanged: 0/0
   534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   536 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
   537 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
   538 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
   539 ;;Total ram usage:       18 bytes
   540 ;; Hardware stack levels required when called:    3
   541 ;; This function calls:
   542 ;;		_setup
   543 ;;		_checkBatteryVoltage
   544 ;;		___awdiv
   545 ;; This function is called by:
   546 ;;		Startup code after reset
   547 ;; This function uses a non-reentrant model
   548 ;;
   549                           
   550                           
   551                           ;psect for function _main
   552  0069                     _main:	
   553                           
   554                           ;main.c: 149: int x = 0;
   555                           
   556                           ;incstack = 0
   557                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   558  0069  0020               	movlb	0	; select bank0
   559  006A  01B2               	clrf	main@x
   560  006B  01B3               	clrf	main@x+1
   561                           
   562                           ;main.c: 150: int y = 0;
   563  006C  01B4               	clrf	main@y
   564  006D  01B5               	clrf	main@y+1
   565                           
   566                           ;main.c: 151: int leftPWMtemp = 0;
   567  006E  01A8               	clrf	main@leftPWMtemp
   568  006F  01A9               	clrf	main@leftPWMtemp+1
   569                           
   570                           ;main.c: 152: int rightPWMtemp = 0;
   571  0070  01AA               	clrf	main@rightPWMtemp
   572  0071  01AB               	clrf	main@rightPWMtemp+1
   573                           
   574                           ;main.c: 153: int xAbs = 0;
   575  0072  01AC               	clrf	main@xAbs
   576  0073  01AD               	clrf	main@xAbs+1
   577                           
   578                           ;main.c: 154: int yAbs = 0;
   579  0074  01AE               	clrf	main@yAbs
   580  0075  01AF               	clrf	main@yAbs+1
   581                           
   582                           ;main.c: 155: int pwmCount = 0;
   583  0076  01B0               	clrf	main@pwmCount
   584  0077  01B1               	clrf	main@pwmCount+1
   585                           
   586                           ;main.c: 157: setup();
   587  0078  3182  22CF  3180   	fcall	_setup
   588  007B                     l923:	
   589                           ;main.c: 158: while (1)
   590                           
   591                           
   592                           ;main.c: 159: {
   593                           ;main.c: 160: if(checkBattery && ((pwmCount == SPEED_INCREMENTS) || batteryLow))
   594  007B  0020               	movlb	0	; select bank0
   595  007C  0841               	movf	_checkBattery,w
   596  007D  1903               	btfsc	3,2
   597  007E  2894               	goto	l931
   598  007F  300B               	movlw	low (_SPEED_INCREMENTS| (0+32768))
   599  0080  3183               	movlp	high __stringtab
   600  0081  000A               	callw
   601  0082  3180               	pagesel	$	;select current page
   602  0083  00A4               	movwf	??_main
   603  0084  01A5               	clrf	??_main+1
   604  0085  0831               	movf	main@pwmCount+1,w
   605  0086  0625               	xorwf	??_main+1,w
   606  0087  1D03               	skipz
   607  0088  288B               	goto	u515
   608  0089  0830               	movf	main@pwmCount,w
   609  008A  0624               	xorwf	??_main,w
   610  008B                     u515:	
   611  008B  1903               	skipnz
   612  008C  2890               	goto	l929
   613  008D  083C               	movf	_batteryLow,w
   614  008E  1903               	btfsc	3,2
   615  008F  2894               	goto	l931
   616  0090                     l929:	
   617                           
   618                           ;main.c: 161: {
   619                           ;main.c: 162: checkBatteryVoltage();
   620  0090  3182  22FC  3180   	fcall	_checkBatteryVoltage
   621  0093  0020               	movlb	0	; select bank0
   622  0094                     l931:	
   623                           
   624                           ;main.c: 163: }
   625                           ;main.c: 164: if (batteryLow)
   626  0094  0020               	movlb	0	; select bank0
   627  0095  083C               	movf	_batteryLow,w
   628  0096  1903               	btfsc	3,2
   629  0097  289C               	goto	l935
   630                           
   631                           ;main.c: 165: {
   632                           ;main.c: 166: LATCbits.LATC4 = 0;
   633  0098  0022               	movlb	2	; select bank2
   634  0099  120E               	bcf	14,4	;volatile
   635                           
   636                           ;main.c: 167: LATAbits.LATA5 = 0;
   637  009A  128C               	bcf	12,5	;volatile
   638                           
   639                           ;main.c: 168: continue;
   640  009B  287B               	goto	l923
   641  009C                     l935:	
   642                           
   643                           ;main.c: 169: }
   644                           ;main.c: 170: if (packetReceived)
   645  009C  0020               	movlb	0	; select bank0
   646  009D  083F               	movf	_packetReceived,w
   647  009E  1903               	btfsc	3,2
   648  009F  2A3D               	goto	l1027
   649                           
   650                           ;main.c: 171: {
   651                           ;main.c: 172: if (packetBuffer[0] == 0x02 && packetBuffer[5] == 0x03)
   652  00A0  0836               	movf	_packetBuffer,w
   653  00A1  3A02               	xorlw	2
   654  00A2  1D03               	skipz
   655  00A3  2A39               	goto	l109
   656  00A4  083B               	movf	_packetBuffer+5,w
   657  00A5  3A03               	xorlw	3
   658  00A6  1D03               	skipz
   659  00A7  2A39               	goto	l109
   660                           
   661                           ;main.c: 173: {
   662                           ;main.c: 174: if (packetBuffer[1] == 0)
   663  00A8  08B7               	movf	_packetBuffer+1,f
   664  00A9  1D03               	skipz
   665  00AA  28C4               	goto	l945
   666                           
   667                           ;main.c: 175: {
   668                           ;main.c: 176: x = 0 - 72 - (128 - packetBuffer[2]);
   669  00AB  0838               	movf	_packetBuffer+2,w
   670  00AC  00A4               	movwf	??_main
   671  00AD  01A5               	clrf	??_main+1
   672  00AE  09A4               	comf	??_main,f
   673  00AF  09A5               	comf	??_main+1,f
   674  00B0  0AA4               	incf	??_main,f
   675  00B1  1903               	skipnz
   676  00B2  0AA5               	incf	??_main+1,f
   677  00B3  0824               	movf	??_main,w
   678  00B4  3E80               	addlw	128
   679  00B5  00A6               	movwf	??_main+2
   680  00B6  3000               	movlw	0
   681  00B7  3D25               	addwfc	??_main+1,w
   682  00B8  00A7               	movwf	??_main+3
   683  00B9  09A6               	comf	??_main+2,f
   684  00BA  09A7               	comf	??_main+3,f
   685  00BB  0AA6               	incf	??_main+2,f
   686  00BC  1903               	skipnz
   687  00BD  0AA7               	incf	??_main+3,f
   688  00BE  0826               	movf	??_main+2,w
   689  00BF  3EB8               	addlw	184
   690  00C0  00B2               	movwf	main@x
   691  00C1  30FF               	movlw	255
   692  00C2  3D27               	addwfc	??_main+3,w
   693  00C3  28D9               	goto	L2
   694  00C4                     l945:	
   695                           ;main.c: 177: }
   696                           
   697                           
   698                           ;main.c: 178: else if (packetBuffer[1] == 1)
   699  00C4  0837               	movf	_packetBuffer+1,w
   700  00C5  3A01               	xorlw	1
   701  00C6  1D03               	skipz
   702  00C7  28CF               	goto	l949
   703                           
   704                           ;main.c: 179: {
   705                           ;main.c: 180: x = 0 - 72 + (packetBuffer[2]);
   706  00C8  0838               	movf	_packetBuffer+2,w
   707  00C9  3EB8               	addlw	184
   708  00CA  00B2               	movwf	main@x
   709  00CB  30FF               	movlw	255
   710  00CC  1803               	skipnc
   711  00CD  3000               	movlw	0
   712  00CE  28D9               	goto	L2
   713  00CF                     l949:	
   714                           ;main.c: 181: }
   715                           
   716                           
   717                           ;main.c: 182: else if (packetBuffer[1] == 2)
   718  00CF  0837               	movf	_packetBuffer+1,w
   719  00D0  3A02               	xorlw	2
   720  00D1  1D03               	skipz
   721  00D2  28DB               	goto	l114
   722                           
   723                           ;main.c: 183: {
   724                           ;main.c: 184: x = 56 + packetBuffer[2];
   725  00D3  0838               	movf	_packetBuffer+2,w
   726  00D4  3E38               	addlw	56
   727  00D5  00B2               	movwf	main@x
   728  00D6  3000               	movlw	0
   729  00D7  1803               	skipnc
   730  00D8  3001               	movlw	1
   731  00D9                     L2:	
   732  00D9  00B3               	movwf	main@x+1
   733                           
   734                           ;main.c: 185: }
   735  00DA  28DD               	goto	l953
   736  00DB                     l114:	
   737                           
   738                           ;main.c: 186: else
   739                           ;main.c: 187: {
   740                           ;main.c: 188: packetCorrupt = 1;
   741  00DB  01BE               	clrf	_packetCorrupt
   742  00DC  0ABE               	incf	_packetCorrupt,f
   743  00DD                     l953:	
   744                           
   745                           ;main.c: 189: }
   746                           ;main.c: 191: if (packetBuffer[3] == 0)
   747  00DD  08B9               	movf	_packetBuffer+3,f
   748  00DE  1D03               	skipz
   749  00DF  28F9               	goto	l957
   750                           
   751                           ;main.c: 192: {
   752                           ;main.c: 193: y = 0 - 72 - (128 - packetBuffer[4]);
   753  00E0  083A               	movf	_packetBuffer+4,w
   754  00E1  00A4               	movwf	??_main
   755  00E2  01A5               	clrf	??_main+1
   756  00E3  09A4               	comf	??_main,f
   757  00E4  09A5               	comf	??_main+1,f
   758  00E5  0AA4               	incf	??_main,f
   759  00E6  1903               	skipnz
   760  00E7  0AA5               	incf	??_main+1,f
   761  00E8  0824               	movf	??_main,w
   762  00E9  3E80               	addlw	128
   763  00EA  00A6               	movwf	??_main+2
   764  00EB  3000               	movlw	0
   765  00EC  3D25               	addwfc	??_main+1,w
   766  00ED  00A7               	movwf	??_main+3
   767  00EE  09A6               	comf	??_main+2,f
   768  00EF  09A7               	comf	??_main+3,f
   769  00F0  0AA6               	incf	??_main+2,f
   770  00F1  1903               	skipnz
   771  00F2  0AA7               	incf	??_main+3,f
   772  00F3  0826               	movf	??_main+2,w
   773  00F4  3EB8               	addlw	184
   774  00F5  00B4               	movwf	main@y
   775  00F6  30FF               	movlw	255
   776  00F7  3D27               	addwfc	??_main+3,w
   777  00F8  290E               	goto	L4
   778  00F9                     l957:	
   779                           ;main.c: 194: }
   780                           
   781                           
   782                           ;main.c: 195: else if (packetBuffer[3] == 1)
   783  00F9  0839               	movf	_packetBuffer+3,w
   784  00FA  3A01               	xorlw	1
   785  00FB  1D03               	skipz
   786  00FC  2904               	goto	l961
   787                           
   788                           ;main.c: 196: {
   789                           ;main.c: 197: y = 0 - 72 + (packetBuffer[4]);
   790  00FD  083A               	movf	_packetBuffer+4,w
   791  00FE  3EB8               	addlw	184
   792  00FF  00B4               	movwf	main@y
   793  0100  30FF               	movlw	255
   794  0101  1803               	skipnc
   795  0102  3000               	movlw	0
   796  0103  290E               	goto	L4
   797  0104                     l961:	
   798                           ;main.c: 198: }
   799                           
   800                           
   801                           ;main.c: 199: else if (packetBuffer[3] == 2)
   802  0104  0839               	movf	_packetBuffer+3,w
   803  0105  3A02               	xorlw	2
   804  0106  1D03               	skipz
   805  0107  2910               	goto	l120
   806                           
   807                           ;main.c: 200: {
   808                           ;main.c: 201: y = 56 + packetBuffer[4];
   809  0108  083A               	movf	_packetBuffer+4,w
   810  0109  3E38               	addlw	56
   811  010A  00B4               	movwf	main@y
   812  010B  3000               	movlw	0
   813  010C  1803               	skipnc
   814  010D  3001               	movlw	1
   815  010E                     L4:	
   816  010E  00B5               	movwf	main@y+1
   817                           
   818                           ;main.c: 202: }
   819  010F  2912               	goto	l965
   820  0110                     l120:	
   821                           
   822                           ;main.c: 203: else
   823                           ;main.c: 204: {
   824                           ;main.c: 205: packetCorrupt = 1;
   825  0110  01BE               	clrf	_packetCorrupt
   826  0111  0ABE               	incf	_packetCorrupt,f
   827  0112                     l965:	
   828                           
   829                           ;main.c: 206: }
   830                           ;main.c: 208: xAbs = x > 0 ? x : -x;
   831  0112  0833               	movf	main@x+1,w
   832  0113  3A80               	xorlw	128
   833  0114  00FF               	movwf	127
   834  0115  3080               	movlw	128
   835  0116  027F               	subwf	127,w
   836  0117  1D03               	skipz
   837  0118  291B               	goto	u635
   838  0119  3001               	movlw	1
   839  011A  0232               	subwf	main@x,w
   840  011B                     u635:	
   841  011B  1803               	skipnc
   842  011C  292A               	goto	l969
   843  011D  0020               	movlb	0	; select bank0
   844  011E  0932               	comf	main@x,w
   845  011F  00A4               	movwf	??_main
   846  0120  0933               	comf	main@x+1,w
   847  0121  00A5               	movwf	??_main+1
   848  0122  0AA4               	incf	??_main,f
   849  0123  1903               	skipnz
   850  0124  0AA5               	incf	??_main+1,f
   851  0125  0824               	movf	??_main,w
   852  0126  00AC               	movwf	main@xAbs
   853  0127  0825               	movf	??_main+1,w
   854  0128  00AD               	movwf	main@xAbs+1
   855  0129  2931               	goto	l971
   856  012A                     l969:	
   857  012A  0020               	movlb	0	; select bank0
   858  012B  0833               	movf	main@x+1,w
   859  012C  01AD               	clrf	main@xAbs+1
   860  012D  07AD               	addwf	main@xAbs+1,f
   861  012E  0832               	movf	main@x,w
   862  012F  01AC               	clrf	main@xAbs
   863  0130  07AC               	addwf	main@xAbs,f
   864  0131                     l971:	
   865                           
   866                           ;main.c: 209: yAbs = y > 0 ? y : -y;
   867  0131  0835               	movf	main@y+1,w
   868  0132  3A80               	xorlw	128
   869  0133  00FF               	movwf	127
   870  0134  3080               	movlw	128
   871  0135  027F               	subwf	127,w
   872  0136  1D03               	skipz
   873  0137  293A               	goto	u645
   874  0138  3001               	movlw	1
   875  0139  0234               	subwf	main@y,w
   876  013A                     u645:	
   877  013A  1803               	skipnc
   878  013B  2949               	goto	l975
   879  013C  0020               	movlb	0	; select bank0
   880  013D  0934               	comf	main@y,w
   881  013E  00A4               	movwf	??_main
   882  013F  0935               	comf	main@y+1,w
   883  0140  00A5               	movwf	??_main+1
   884  0141  0AA4               	incf	??_main,f
   885  0142  1903               	skipnz
   886  0143  0AA5               	incf	??_main+1,f
   887  0144  0824               	movf	??_main,w
   888  0145  00AE               	movwf	main@yAbs
   889  0146  0825               	movf	??_main+1,w
   890  0147  00AF               	movwf	main@yAbs+1
   891  0148  2950               	goto	l129
   892  0149                     l975:	
   893  0149  0020               	movlb	0	; select bank0
   894  014A  0835               	movf	main@y+1,w
   895  014B  01AF               	clrf	main@yAbs+1
   896  014C  07AF               	addwf	main@yAbs+1,f
   897  014D  0834               	movf	main@y,w
   898  014E  01AE               	clrf	main@yAbs
   899  014F  07AE               	addwf	main@yAbs,f
   900  0150                     l129:	
   901                           
   902                           ;main.c: 211: if (x < (-y))
   903  0150  0934               	comf	main@y,w
   904  0151  00A4               	movwf	??_main
   905  0152  0935               	comf	main@y+1,w
   906  0153  00A5               	movwf	??_main+1
   907  0154  0AA4               	incf	??_main,f
   908  0155  1903               	skipnz
   909  0156  0AA5               	incf	??_main+1,f
   910  0157  0833               	movf	main@x+1,w
   911  0158  3A80               	xorlw	128
   912  0159  00A6               	movwf	??_main+2
   913  015A  0825               	movf	??_main+1,w
   914  015B  3A80               	xorlw	128
   915  015C  0226               	subwf	??_main+2,w
   916  015D  1D03               	skipz
   917  015E  2961               	goto	u655
   918  015F  0824               	movf	??_main,w
   919  0160  0232               	subwf	main@x,w
   920  0161                     u655:	
   921  0161  1803               	skipnc
   922  0162  2977               	goto	l130
   923                           
   924                           ;main.c: 212: {
   925                           ;main.c: 213: leftDir = 0;
   926  0163  0020               	movlb	0	; select bank0
   927  0164  01C2               	clrf	_leftDir
   928                           
   929                           ;main.c: 214: if (x < 0)
   930  0165  1FB3               	btfss	main@x+1,7
   931  0166  2973               	goto	l983
   932                           
   933                           ;main.c: 215: {
   934                           ;main.c: 216: leftPWMtemp = xAbs - y;
   935  0167  0934               	comf	main@y,w
   936  0168  00A4               	movwf	??_main
   937  0169  0935               	comf	main@y+1,w
   938  016A  00A5               	movwf	??_main+1
   939  016B  0AA4               	incf	??_main,f
   940  016C  1903               	skipnz
   941  016D  0AA5               	incf	??_main+1,f
   942  016E  082C               	movf	main@xAbs,w
   943  016F  0724               	addwf	??_main,w
   944  0170  00A8               	movwf	main@leftPWMtemp
   945  0171  082D               	movf	main@xAbs+1,w
   946  0172  2987               	goto	L6
   947  0173                     l983:	
   948                           ;main.c: 217: }
   949                           
   950                           
   951                           ;main.c: 218: else
   952                           ;main.c: 219: {
   953                           ;main.c: 220: leftPWMtemp = yAbs - x;
   954  0173  0932               	comf	main@x,w
   955  0174  00A4               	movwf	??_main
   956  0175  0933               	comf	main@x+1,w
   957  0176  297F               	goto	L11
   958  0177                     l130:	
   959                           ;main.c: 221: }
   960                           ;main.c: 222: }
   961                           
   962                           
   963                           ;main.c: 223: else
   964                           ;main.c: 224: {
   965                           ;main.c: 225: leftDir = 1;
   966  0177  0020               	movlb	0	; select bank0
   967  0178  01C2               	clrf	_leftDir
   968  0179  0AC2               	incf	_leftDir,f
   969                           
   970                           ;main.c: 226: if (x < 0)
   971  017A  1FB3               	btfss	main@x+1,7
   972  017B  2989               	goto	l987
   973                           
   974                           ;main.c: 227: {
   975                           ;main.c: 228: leftPWMtemp = yAbs - xAbs;
   976  017C  092C               	comf	main@xAbs,w
   977  017D  00A4               	movwf	??_main
   978  017E  092D               	comf	main@xAbs+1,w
   979  017F                     L11:	
   980  017F  00A5               	movwf	??_main+1
   981  0180  0AA4               	incf	??_main,f
   982  0181  1903               	skipnz
   983  0182  0AA5               	incf	??_main+1,f
   984  0183  082E               	movf	main@yAbs,w
   985  0184  0724               	addwf	??_main,w
   986  0185  00A8               	movwf	main@leftPWMtemp
   987  0186  082F               	movf	main@yAbs+1,w
   988  0187                     L6:	
   989  0187  3D25               	addwfc	??_main+1,w
   990  0188  298E               	goto	L7
   991  0189                     l987:	
   992                           ;main.c: 229: }
   993                           
   994                           
   995                           ;main.c: 230: else
   996                           ;main.c: 231: {
   997                           ;main.c: 232: leftPWMtemp = x + y;
   998  0189  0834               	movf	main@y,w
   999  018A  0732               	addwf	main@x,w
  1000  018B  00A8               	movwf	main@leftPWMtemp
  1001  018C  0835               	movf	main@y+1,w
  1002  018D  3D33               	addwfc	main@x+1,w
  1003  018E                     L7:	
  1004  018E  00A9               	movwf	main@leftPWMtemp+1
  1005                           
  1006                           ;main.c: 233: }
  1007                           ;main.c: 234: }
  1008                           ;main.c: 236: if (y > x)
  1009  018F  0833               	movf	main@x+1,w
  1010  0190  3A80               	xorlw	128
  1011  0191  00A4               	movwf	??_main
  1012  0192  0835               	movf	main@y+1,w
  1013  0193  3A80               	xorlw	128
  1014  0194  0224               	subwf	??_main,w
  1015  0195  1D03               	skipz
  1016  0196  2999               	goto	u685
  1017  0197  0834               	movf	main@y,w
  1018  0198  0232               	subwf	main@x,w
  1019  0199                     u685:	
  1020  0199  1803               	skipnc
  1021  019A  29BB               	goto	l999
  1022                           
  1023                           ;main.c: 237: {
  1024                           ;main.c: 238: rightDir = 1;
  1025  019B  0020               	movlb	0	; select bank0
  1026  019C  01C3               	clrf	_rightDir
  1027  019D  0AC3               	incf	_rightDir,f
  1028                           
  1029                           ;main.c: 239: if (y > 0)
  1030  019E  0835               	movf	main@y+1,w
  1031  019F  3A80               	xorlw	128
  1032  01A0  00FF               	movwf	127
  1033  01A1  3080               	movlw	128
  1034  01A2  027F               	subwf	127,w
  1035  01A3  1D03               	skipz
  1036  01A4  29A7               	goto	u695
  1037  01A5  3001               	movlw	1
  1038  01A6  0234               	subwf	main@y,w
  1039  01A7                     u695:	
  1040  01A7  1C03               	skipc
  1041  01A8  29B6               	goto	l997
  1042                           
  1043                           ;main.c: 240: {
  1044                           ;main.c: 241: rightPWMtemp = y - x;
  1045  01A9  0020               	movlb	0	; select bank0
  1046  01AA  0932               	comf	main@x,w
  1047  01AB  00A4               	movwf	??_main
  1048  01AC  0933               	comf	main@x+1,w
  1049  01AD  00A5               	movwf	??_main+1
  1050  01AE  0AA4               	incf	??_main,f
  1051  01AF  1903               	skipnz
  1052  01B0  0AA5               	incf	??_main+1,f
  1053  01B1  0834               	movf	main@y,w
  1054  01B2  0724               	addwf	??_main,w
  1055  01B3  00AA               	movwf	main@rightPWMtemp
  1056  01B4  0835               	movf	main@y+1,w
  1057  01B5  29D4               	goto	L9
  1058  01B6                     l997:	
  1059                           ;main.c: 242: }
  1060                           
  1061                           
  1062                           ;main.c: 243: else
  1063                           ;main.c: 244: {
  1064                           ;main.c: 245: rightPWMtemp = xAbs - yAbs;
  1065  01B6  0020               	movlb	0	; select bank0
  1066  01B7  092E               	comf	main@yAbs,w
  1067  01B8  00A4               	movwf	??_main
  1068  01B9  092F               	comf	main@yAbs+1,w
  1069  01BA  29CC               	goto	L12
  1070  01BB                     l999:	
  1071                           ;main.c: 246: }
  1072                           ;main.c: 247: }
  1073                           
  1074                           
  1075                           ;main.c: 248: else
  1076                           ;main.c: 249: {
  1077                           ;main.c: 250: rightDir = 0;
  1078  01BB  0020               	movlb	0	; select bank0
  1079  01BC  01C3               	clrf	_rightDir
  1080                           
  1081                           ;main.c: 251: if (y > 0)
  1082  01BD  0835               	movf	main@y+1,w
  1083  01BE  3A80               	xorlw	128
  1084  01BF  00FF               	movwf	127
  1085  01C0  3080               	movlw	128
  1086  01C1  027F               	subwf	127,w
  1087  01C2  1D03               	skipz
  1088  01C3  29C6               	goto	u705
  1089  01C4  3001               	movlw	1
  1090  01C5  0234               	subwf	main@y,w
  1091  01C6                     u705:	
  1092  01C6  1C03               	skipc
  1093  01C7  29D6               	goto	l1005
  1094                           
  1095                           ;main.c: 252: {
  1096                           ;main.c: 253: rightPWMtemp = xAbs - y;
  1097  01C8  0020               	movlb	0	; select bank0
  1098  01C9  0934               	comf	main@y,w
  1099  01CA  00A4               	movwf	??_main
  1100  01CB  0935               	comf	main@y+1,w
  1101  01CC                     L12:	
  1102  01CC  00A5               	movwf	??_main+1
  1103  01CD  0AA4               	incf	??_main,f
  1104  01CE  1903               	skipnz
  1105  01CF  0AA5               	incf	??_main+1,f
  1106  01D0  082C               	movf	main@xAbs,w
  1107  01D1  0724               	addwf	??_main,w
  1108  01D2  00AA               	movwf	main@rightPWMtemp
  1109  01D3  082D               	movf	main@xAbs+1,w
  1110  01D4                     L9:	
  1111  01D4  3D25               	addwfc	??_main+1,w
  1112  01D5  29DC               	goto	L10
  1113  01D6                     l1005:	
  1114                           ;main.c: 254: }
  1115                           
  1116                           
  1117                           ;main.c: 255: else
  1118                           ;main.c: 256: {
  1119                           ;main.c: 257: rightPWMtemp = yAbs + x;
  1120  01D6  0020               	movlb	0	; select bank0
  1121  01D7  0832               	movf	main@x,w
  1122  01D8  072E               	addwf	main@yAbs,w
  1123  01D9  00AA               	movwf	main@rightPWMtemp
  1124  01DA  0833               	movf	main@x+1,w
  1125  01DB  3D2F               	addwfc	main@yAbs+1,w
  1126  01DC                     L10:	
  1127  01DC  00AB               	movwf	main@rightPWMtemp+1
  1128                           
  1129                           ;main.c: 258: }
  1130                           ;main.c: 259: }
  1131                           ;main.c: 260: if (leftPWMtemp > 100)
  1132  01DD  0829               	movf	main@leftPWMtemp+1,w
  1133  01DE  3A80               	xorlw	128
  1134  01DF  00FF               	movwf	127
  1135  01E0  3080               	movlw	128
  1136  01E1  027F               	subwf	127,w
  1137  01E2  1D03               	skipz
  1138  01E3  29E6               	goto	u715
  1139  01E4  3065               	movlw	101
  1140  01E5  0228               	subwf	main@leftPWMtemp,w
  1141  01E6                     u715:	
  1142  01E6  1C03               	skipc
  1143  01E7  29ED               	goto	l1011
  1144                           
  1145                           ;main.c: 261: {
  1146                           ;main.c: 262: leftPWMtemp = 100;
  1147  01E8  3064               	movlw	100
  1148  01E9  0020               	movlb	0	; select bank0
  1149  01EA  00A8               	movwf	main@leftPWMtemp
  1150  01EB  3000               	movlw	0
  1151  01EC  00A9               	movwf	main@leftPWMtemp+1
  1152  01ED                     l1011:	
  1153                           
  1154                           ;main.c: 263: }
  1155                           ;main.c: 264: if (rightPWMtemp > 100)
  1156  01ED  0020               	movlb	0	; select bank0
  1157  01EE  082B               	movf	main@rightPWMtemp+1,w
  1158  01EF  3A80               	xorlw	128
  1159  01F0  00FF               	movwf	127
  1160  01F1  3080               	movlw	128
  1161  01F2  027F               	subwf	127,w
  1162  01F3  1D03               	skipz
  1163  01F4  29F7               	goto	u725
  1164  01F5  3065               	movlw	101
  1165  01F6  022A               	subwf	main@rightPWMtemp,w
  1166  01F7                     u725:	
  1167  01F7  1C03               	skipc
  1168  01F8  29FE               	goto	l1015
  1169                           
  1170                           ;main.c: 265: {
  1171                           ;main.c: 266: rightPWMtemp = 100;
  1172  01F9  3064               	movlw	100
  1173  01FA  0020               	movlb	0	; select bank0
  1174  01FB  00AA               	movwf	main@rightPWMtemp
  1175  01FC  3000               	movlw	0
  1176  01FD  00AB               	movwf	main@rightPWMtemp+1
  1177  01FE                     l1015:	
  1178                           
  1179                           ;main.c: 267: }
  1180                           ;main.c: 269: leftPWM = leftPWMtemp / 12;
  1181  01FE  300C               	movlw	12
  1182  01FF  00F3               	movwf	?___awdiv
  1183  0200  3000               	movlw	0
  1184  0201  00F4               	movwf	?___awdiv+1
  1185  0202  0020               	movlb	0	; select bank0
  1186  0203  0829               	movf	main@leftPWMtemp+1,w
  1187  0204  01F6               	clrf	?___awdiv+3
  1188  0205  07F6               	addwf	?___awdiv+3,f
  1189  0206  0828               	movf	main@leftPWMtemp,w
  1190  0207  01F5               	clrf	?___awdiv+2
  1191  0208  07F5               	addwf	?___awdiv+2,f
  1192  0209  3182  227B  3180   	fcall	___awdiv
  1193  020C  0873               	movf	?___awdiv,w
  1194  020D  0020               	movlb	0	; select bank0
  1195  020E  00A4               	movwf	??_main
  1196  020F  0824               	movf	??_main,w
  1197  0210  00BD               	movwf	_leftPWM
  1198                           
  1199                           ;main.c: 270: rightPWM = rightPWMtemp / 12;
  1200  0211  300C               	movlw	12
  1201  0212  00F3               	movwf	?___awdiv
  1202  0213  3000               	movlw	0
  1203  0214  00F4               	movwf	?___awdiv+1
  1204  0215  082B               	movf	main@rightPWMtemp+1,w
  1205  0216  01F6               	clrf	?___awdiv+3
  1206  0217  07F6               	addwf	?___awdiv+3,f
  1207  0218  082A               	movf	main@rightPWMtemp,w
  1208  0219  01F5               	clrf	?___awdiv+2
  1209  021A  07F5               	addwf	?___awdiv+2,f
  1210  021B  3182  227B  3180   	fcall	___awdiv
  1211  021E  0873               	movf	?___awdiv,w
  1212  021F  0020               	movlb	0	; select bank0
  1213  0220  00A4               	movwf	??_main
  1214  0221  0824               	movf	??_main,w
  1215  0222  00C0               	movwf	_rightPWM
  1216                           
  1217                           ;main.c: 272: if (leftDir)
  1218  0223  0842               	movf	_leftDir,w
  1219  0224  1903               	btfsc	3,2
  1220  0225  2A2A               	goto	l144
  1221                           
  1222                           ;main.c: 273: {
  1223                           ;main.c: 275: LATCbits.LATC0 = 0;
  1224  0226  0022               	movlb	2	; select bank2
  1225  0227  100E               	bcf	14,0	;volatile
  1226                           
  1227                           ;main.c: 276: LATCbits.LATC1 = 1;
  1228  0228  148E               	bsf	14,1	;volatile
  1229                           
  1230                           ;main.c: 277: }
  1231  0229  2A2D               	goto	l1021
  1232  022A                     l144:	
  1233                           
  1234                           ;main.c: 278: else
  1235                           ;main.c: 279: {
  1236                           ;main.c: 280: LATCbits.LATC0 = 1;
  1237  022A  0022               	movlb	2	; select bank2
  1238  022B  140E               	bsf	14,0	;volatile
  1239                           
  1240                           ;main.c: 281: LATCbits.LATC1 = 0;
  1241  022C  108E               	bcf	14,1	;volatile
  1242  022D                     l1021:	
  1243                           
  1244                           ;main.c: 282: }
  1245                           ;main.c: 283: if (rightDir)
  1246  022D  0020               	movlb	0	; select bank0
  1247  022E  0843               	movf	_rightDir,w
  1248  022F  1903               	btfsc	3,2
  1249  0230  2A35               	goto	l146
  1250                           
  1251                           ;main.c: 284: {
  1252                           ;main.c: 286: LATCbits.LATC2 = 0;
  1253  0231  0022               	movlb	2	; select bank2
  1254  0232  110E               	bcf	14,2	;volatile
  1255                           
  1256                           ;main.c: 287: LATCbits.LATC3 = 1;
  1257  0233  158E               	bsf	14,3	;volatile
  1258                           
  1259                           ;main.c: 288: }
  1260  0234  2A3B               	goto	l1025
  1261  0235                     l146:	
  1262                           
  1263                           ;main.c: 289: else
  1264                           ;main.c: 290: {
  1265                           ;main.c: 291: LATCbits.LATC2 = 1;
  1266  0235  0022               	movlb	2	; select bank2
  1267  0236  150E               	bsf	14,2	;volatile
  1268                           
  1269                           ;main.c: 292: LATCbits.LATC3 = 0;
  1270  0237  118E               	bcf	14,3	;volatile
  1271                           
  1272                           ;main.c: 293: }
  1273                           ;main.c: 294: }
  1274  0238  2A3B               	goto	l1025
  1275  0239                     l109:	
  1276                           
  1277                           ;main.c: 295: else
  1278                           ;main.c: 296: {
  1279                           ;main.c: 298: packetCorrupt = 1;
  1280  0239  01BE               	clrf	_packetCorrupt
  1281  023A  0ABE               	incf	_packetCorrupt,f
  1282  023B                     l1025:	
  1283                           
  1284                           ;main.c: 299: }
  1285                           ;main.c: 300: packetReceived = 0;
  1286  023B  0020               	movlb	0	; select bank0
  1287  023C  01BF               	clrf	_packetReceived
  1288  023D                     l1027:	
  1289                           
  1290                           ;main.c: 301: }
  1291                           ;main.c: 302: if (pwmCount > leftPWM)
  1292  023D  0831               	movf	main@pwmCount+1,w
  1293  023E  3A80               	xorlw	128
  1294  023F  3C80               	sublw	128
  1295  0240  1D03               	skipz
  1296  0241  2A44               	goto	u755
  1297  0242  0830               	movf	main@pwmCount,w
  1298  0243  023D               	subwf	_leftPWM,w
  1299  0244                     u755:	
  1300  0244  1803               	skipnc
  1301  0245  2A49               	goto	l1031
  1302                           
  1303                           ;main.c: 303: {
  1304                           ;main.c: 304: LATCbits.LATC4 = 0;
  1305  0246  0022               	movlb	2	; select bank2
  1306  0247  120E               	bcf	14,4	;volatile
  1307                           
  1308                           ;main.c: 305: }
  1309  0248  2A50               	goto	l1035
  1310  0249                     l1031:	
  1311                           
  1312                           ;main.c: 306: else if (leftPWM > 0)
  1313  0249  0020               	movlb	0	; select bank0
  1314  024A  083D               	movf	_leftPWM,w
  1315  024B  1903               	btfsc	3,2
  1316  024C  2A50               	goto	l1035
  1317                           
  1318                           ;main.c: 307: {
  1319                           ;main.c: 308: LATCbits.LATC4 = 1;
  1320  024D  0022               	movlb	2	; select bank2
  1321  024E  160E               	bsf	14,4	;volatile
  1322  024F  0020               	movlb	0	; select bank0
  1323  0250                     l1035:	
  1324                           
  1325                           ;main.c: 309: }
  1326                           ;main.c: 310: if (pwmCount > rightPWM)
  1327  0250  0020               	movlb	0	; select bank0
  1328  0251  0831               	movf	main@pwmCount+1,w
  1329  0252  3A80               	xorlw	128
  1330  0253  3C80               	sublw	128
  1331  0254  1D03               	skipz
  1332  0255  2A58               	goto	u775
  1333  0256  0830               	movf	main@pwmCount,w
  1334  0257  0240               	subwf	_rightPWM,w
  1335  0258                     u775:	
  1336  0258  1803               	skipnc
  1337  0259  2A5D               	goto	l1039
  1338                           
  1339                           ;main.c: 311: {
  1340                           ;main.c: 312: LATAbits.LATA5 = 0;
  1341  025A  0022               	movlb	2	; select bank2
  1342  025B  128C               	bcf	12,5	;volatile
  1343                           
  1344                           ;main.c: 313: }
  1345  025C  2A64               	goto	l1043
  1346  025D                     l1039:	
  1347                           
  1348                           ;main.c: 314: else if (rightPWM > 0)
  1349  025D  0020               	movlb	0	; select bank0
  1350  025E  0840               	movf	_rightPWM,w
  1351  025F  1903               	btfsc	3,2
  1352  0260  2A64               	goto	l1043
  1353                           
  1354                           ;main.c: 315: {
  1355                           ;main.c: 316: LATAbits.LATA5 = 1;
  1356  0261  0022               	movlb	2	; select bank2
  1357  0262  168C               	bsf	12,5	;volatile
  1358  0263  0020               	movlb	0	; select bank0
  1359  0264                     l1043:	
  1360                           
  1361                           ;main.c: 317: }
  1362                           ;main.c: 318: pwmCount++;
  1363  0264  3001               	movlw	1
  1364  0265  0020               	movlb	0	; select bank0
  1365  0266  07B0               	addwf	main@pwmCount,f
  1366  0267  3000               	movlw	0
  1367  0268  3DB1               	addwfc	main@pwmCount+1,f
  1368                           
  1369                           ;main.c: 319: if (pwmCount > SPEED_INCREMENTS)
  1370  0269  300B               	movlw	low (_SPEED_INCREMENTS| (0+32768))
  1371  026A  3183               	movlp	high __stringtab
  1372  026B  000A               	callw
  1373  026C  3180               	pagesel	$	;select current page
  1374  026D  00A4               	movwf	??_main
  1375  026E  0831               	movf	main@pwmCount+1,w
  1376  026F  3A80               	xorlw	128
  1377  0270  3C80               	sublw	128
  1378  0271  1D03               	skipz
  1379  0272  2A75               	goto	u795
  1380  0273  0830               	movf	main@pwmCount,w
  1381  0274  0224               	subwf	??_main,w
  1382  0275                     u795:	
  1383  0275  1803               	skipnc
  1384  0276  287B               	goto	l923
  1385                           
  1386                           ;main.c: 320: {
  1387                           ;main.c: 321: pwmCount = 0;
  1388  0277  0020               	movlb	0	; select bank0
  1389  0278  01B0               	clrf	main@pwmCount
  1390  0279  01B1               	clrf	main@pwmCount+1
  1391  027A  287B               	goto	l923
  1392  027B                     __end_of_main:	
  1393                           
  1394                           	psect	text1
  1395  027B                     __ptext1:	
  1396 ;; *************** function ___awdiv *****************
  1397 ;; Defined at:
  1398 ;;		line 5 in file "/Applications/microchip/xc8/v1.21/sources/pic/awdiv.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;  divisor         2    3[COMMON] int 
  1401 ;;  dividend        2    5[COMMON] int 
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;  quotient        2    2[BANK0 ] int 
  1404 ;;  sign            1    1[BANK0 ] unsigned char 
  1405 ;;  counter         1    0[BANK0 ] unsigned char 
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  2    3[COMMON] int 
  1408 ;; Registers used:
  1409 ;;		wreg, status,2, status,0
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1415 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1416 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1417 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1418 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1419 ;;Total ram usage:        9 bytes
  1420 ;; Hardware stack levels used:    1
  1421 ;; Hardware stack levels required when called:    2
  1422 ;; This function calls:
  1423 ;;		Nothing
  1424 ;; This function is called by:
  1425 ;;		_main
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           
  1430                           ;psect for function ___awdiv
  1431  027B                     ___awdiv:	
  1432                           
  1433                           ;incstack = 0
  1434                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1435  027B  0020               	movlb	0	; select bank0
  1436  027C  01A1               	clrf	___awdiv@sign
  1437  027D  1FF4               	btfss	___awdiv@divisor+1,7
  1438  027E  2A86               	goto	l1059
  1439  027F  09F3               	comf	___awdiv@divisor,f
  1440  0280  09F4               	comf	___awdiv@divisor+1,f
  1441  0281  0AF3               	incf	___awdiv@divisor,f
  1442  0282  1903               	skipnz
  1443  0283  0AF4               	incf	___awdiv@divisor+1,f
  1444  0284  01A1               	clrf	___awdiv@sign
  1445  0285  0AA1               	incf	___awdiv@sign,f
  1446  0286                     l1059:	
  1447  0286  1FF6               	btfss	___awdiv@dividend+1,7
  1448  0287  2A91               	goto	l1065
  1449  0288  09F5               	comf	___awdiv@dividend,f
  1450  0289  09F6               	comf	___awdiv@dividend+1,f
  1451  028A  0AF5               	incf	___awdiv@dividend,f
  1452  028B  1903               	skipnz
  1453  028C  0AF6               	incf	___awdiv@dividend+1,f
  1454  028D  3001               	movlw	1
  1455  028E  00F7               	movwf	??___awdiv
  1456  028F  0877               	movf	??___awdiv,w
  1457  0290  06A1               	xorwf	___awdiv@sign,f
  1458  0291                     l1065:	
  1459  0291  01A2               	clrf	___awdiv@quotient
  1460  0292  01A3               	clrf	___awdiv@quotient+1
  1461  0293  0874               	movf	___awdiv@divisor+1,w
  1462  0294  0473               	iorwf	___awdiv@divisor,w
  1463  0295  1903               	skipnz
  1464  0296  2AC0               	goto	l1087
  1465  0297  01A0               	clrf	___awdiv@counter
  1466  0298  0AA0               	incf	___awdiv@counter,f
  1467  0299                     l1075:	
  1468  0299  1BF4               	btfsc	___awdiv@divisor+1,7
  1469  029A  2AA5               	goto	l1077
  1470  029B  3001               	movlw	1
  1471  029C                     u835:	
  1472  029C  35F3               	lslf	___awdiv@divisor,f
  1473  029D  0DF4               	rlf	___awdiv@divisor+1,f
  1474  029E  0B89               	decfsz	9,f
  1475  029F  2A9C               	goto	u835
  1476  02A0  3001               	movlw	1
  1477  02A1  00F7               	movwf	??___awdiv
  1478  02A2  0877               	movf	??___awdiv,w
  1479  02A3  07A0               	addwf	___awdiv@counter,f
  1480  02A4  2A99               	goto	l1075
  1481  02A5                     l1077:	
  1482  02A5  3001               	movlw	1
  1483  02A6                     u855:	
  1484  02A6  35A2               	lslf	___awdiv@quotient,f
  1485  02A7  0DA3               	rlf	___awdiv@quotient+1,f
  1486  02A8  0B89               	decfsz	9,f
  1487  02A9  2AA6               	goto	u855
  1488  02AA  0874               	movf	___awdiv@divisor+1,w
  1489  02AB  0276               	subwf	___awdiv@dividend+1,w
  1490  02AC  1D03               	skipz
  1491  02AD  2AB0               	goto	u865
  1492  02AE  0873               	movf	___awdiv@divisor,w
  1493  02AF  0275               	subwf	___awdiv@dividend,w
  1494  02B0                     u865:	
  1495  02B0  1C03               	skipc
  1496  02B1  2AB7               	goto	l1083
  1497  02B2  0873               	movf	___awdiv@divisor,w
  1498  02B3  02F5               	subwf	___awdiv@dividend,f
  1499  02B4  0874               	movf	___awdiv@divisor+1,w
  1500  02B5  3BF6               	subwfb	___awdiv@dividend+1,f
  1501  02B6  1422               	bsf	___awdiv@quotient,0
  1502  02B7                     l1083:	
  1503  02B7  3001               	movlw	1
  1504  02B8                     u875:	
  1505  02B8  36F4               	lsrf	___awdiv@divisor+1,f
  1506  02B9  0CF3               	rrf	___awdiv@divisor,f
  1507  02BA  0B89               	decfsz	9,f
  1508  02BB  2AB8               	goto	u875
  1509  02BC  3001               	movlw	1
  1510  02BD  02A0               	subwf	___awdiv@counter,f
  1511  02BE  1D03               	btfss	3,2
  1512  02BF  2AA5               	goto	l1077
  1513  02C0                     l1087:	
  1514  02C0  0821               	movf	___awdiv@sign,w
  1515  02C1  1903               	btfsc	3,2
  1516  02C2  2AC8               	goto	l1091
  1517  02C3  09A2               	comf	___awdiv@quotient,f
  1518  02C4  09A3               	comf	___awdiv@quotient+1,f
  1519  02C5  0AA2               	incf	___awdiv@quotient,f
  1520  02C6  1903               	skipnz
  1521  02C7  0AA3               	incf	___awdiv@quotient+1,f
  1522  02C8                     l1091:	
  1523  02C8  0823               	movf	___awdiv@quotient+1,w
  1524  02C9  01F4               	clrf	?___awdiv+1
  1525  02CA  07F4               	addwf	?___awdiv+1,f
  1526  02CB  0822               	movf	___awdiv@quotient,w
  1527  02CC  01F3               	clrf	?___awdiv
  1528  02CD  07F3               	addwf	?___awdiv,f
  1529  02CE  0008               	return
  1530  02CF                     __end_of___awdiv:	
  1531                           
  1532                           	psect	text2
  1533  02FC                     __ptext2:	
  1534 ;; *************** function _checkBatteryVoltage *****************
  1535 ;; Defined at:
  1536 ;;		line 140 in file "main.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;		None
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;		None
  1541 ;; Return value:  Size  Location     Type
  1542 ;;		None               void
  1543 ;; Registers used:
  1544 ;;		status,2
  1545 ;; Tracked objects:
  1546 ;;		On entry : 0/0
  1547 ;;		On exit  : 0/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1554 ;;Total ram usage:        0 bytes
  1555 ;; Hardware stack levels used:    1
  1556 ;; Hardware stack levels required when called:    2
  1557 ;; This function calls:
  1558 ;;		Nothing
  1559 ;; This function is called by:
  1560 ;;		_main
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           
  1565                           ;psect for function _checkBatteryVoltage
  1566  02FC                     _checkBatteryVoltage:	
  1567                           
  1568                           ;main.c: 141: checkBattery = 0;
  1569                           
  1570                           ;incstack = 0
  1571                           ; Regs used in _checkBatteryVoltage: [status,2]
  1572  02FC  0020               	movlb	0	; select bank0
  1573  02FD  01C1               	clrf	_checkBattery
  1574                           
  1575                           ;main.c: 142: ADON = 1;
  1576  02FE  0021               	movlb	1	; select bank1
  1577  02FF  141D               	bsf	29,0	;volatile
  1578                           
  1579                           ;main.c: 144: ADGO = 1;
  1580  0300  149D               	bsf	29,1	;volatile
  1581  0301  0008               	return
  1582  0302                     __end_of_checkBatteryVoltage:	
  1583                           
  1584                           	psect	text3
  1585  02CF                     __ptext3:	
  1586 ;; *************** function _setup *****************
  1587 ;; Defined at:
  1588 ;;		line 98 in file "main.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;		None
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;		None
  1593 ;; Return value:  Size  Location     Type
  1594 ;;		None               void
  1595 ;; Registers used:
  1596 ;;		wreg, status,2, status,0
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1606 ;;Total ram usage:        0 bytes
  1607 ;; Hardware stack levels used:    1
  1608 ;; Hardware stack levels required when called:    2
  1609 ;; This function calls:
  1610 ;;		Nothing
  1611 ;; This function is called by:
  1612 ;;		_main
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           
  1617                           ;psect for function _setup
  1618  02CF                     _setup:	
  1619                           
  1620                           ;main.c: 100: OSCCONbits.IRCF = 0b1111;
  1621                           
  1622                           ;incstack = 0
  1623                           ; Regs used in _setup: [wreg+status,2+status,0]
  1624  02CF  303C               	movlw	60
  1625  02D0  0021               	movlb	1	; select bank1
  1626  02D1  0499               	iorwf	25,f	;volatile
  1627                           
  1628                           ;main.c: 103: TRISC5 = 1; TRISC4 = 1; SPBRG = ((int)(16000000L/(16UL * 9600) -1)); RCSTA
      +                           = (0|0x90); TXSTA = (0x4|0|0x20);
  1629  02D2  168E               	bsf	14,5	;volatile
  1630  02D3  160E               	bsf	14,4	;volatile
  1631  02D4  3000               	movlw	0
  1632  02D5  0023               	movlb	3	; select bank3
  1633  02D6  009C               	movwf	28	;volatile
  1634  02D7  3067               	movlw	103
  1635  02D8  009B               	movwf	27	;volatile
  1636  02D9  3090               	movlw	144
  1637  02DA  009D               	movwf	29	;volatile
  1638  02DB  3024               	movlw	36
  1639  02DC  009E               	movwf	30	;volatile
  1640                           
  1641                           ;main.c: 104: TXEN = 0;
  1642  02DD  129E               	bcf	30,5	;volatile
  1643                           
  1644                           ;main.c: 107: TRISAbits.TRISA4 = 1;
  1645  02DE  0021               	movlb	1	; select bank1
  1646  02DF  160C               	bsf	12,4	;volatile
  1647                           
  1648                           ;main.c: 108: TRISAbits.TRISA5 = 0;
  1649  02E0  128C               	bcf	12,5	;volatile
  1650                           
  1651                           ;main.c: 109: TRISCbits.TRISC0 = 0;
  1652  02E1  100E               	bcf	14,0	;volatile
  1653                           
  1654                           ;main.c: 110: TRISCbits.TRISC1 = 0;
  1655  02E2  108E               	bcf	14,1	;volatile
  1656                           
  1657                           ;main.c: 111: TRISCbits.TRISC2 = 0;
  1658  02E3  110E               	bcf	14,2	;volatile
  1659                           
  1660                           ;main.c: 112: TRISCbits.TRISC3 = 0;
  1661  02E4  118E               	bcf	14,3	;volatile
  1662                           
  1663                           ;main.c: 113: TRISCbits.TRISC4 = 0;
  1664  02E5  120E               	bcf	14,4	;volatile
  1665                           
  1666                           ;main.c: 114: TRISCbits.TRISC5 = 1;
  1667  02E6  168E               	bsf	14,5	;volatile
  1668                           
  1669                           ;main.c: 117: ANSELC = 0x00;
  1670  02E7  0023               	movlb	3	; select bank3
  1671  02E8  018E               	clrf	14	;volatile
  1672                           
  1673                           ;main.c: 118: ANSELA = 0x00;
  1674  02E9  018C               	clrf	12	;volatile
  1675                           
  1676                           ;main.c: 119: ANSELAbits.ANSA4 = 1;
  1677  02EA  160C               	bsf	12,4	;volatile
  1678                           
  1679                           ;main.c: 122: LATC = 0x00;
  1680  02EB  0022               	movlb	2	; select bank2
  1681  02EC  018E               	clrf	14	;volatile
  1682                           
  1683                           ;main.c: 123: LATA = 0x00;
  1684  02ED  018C               	clrf	12	;volatile
  1685                           
  1686                           ;main.c: 126: ADCON0bits.CHS = 0b00011;
  1687  02EE  0021               	movlb	1	; select bank1
  1688  02EF  081D               	movf	29,w	;volatile
  1689  02F0  3983               	andlw	-125
  1690  02F1  380C               	iorlw	12
  1691  02F2  009D               	movwf	29	;volatile
  1692                           
  1693                           ;main.c: 127: ADCON1bits.ADCS = 0b101;
  1694  02F3  081E               	movf	30,w	;volatile
  1695  02F4  398F               	andlw	-113
  1696  02F5  3850               	iorlw	80
  1697  02F6  009E               	movwf	30	;volatile
  1698                           
  1699                           ;main.c: 131: RCIE = 1;
  1700  02F7  1691               	bsf	17,5	;volatile
  1701                           
  1702                           ;main.c: 132: ADIE = 1;
  1703  02F8  1711               	bsf	17,6	;volatile
  1704                           
  1705                           ;main.c: 133: PEIE = 1;
  1706  02F9  170B               	bsf	11,6	;volatile
  1707                           
  1708                           ;main.c: 134: GIE = 1;
  1709  02FA  178B               	bsf	11,7	;volatile
  1710  02FB  0008               	return
  1711  02FC                     __end_of_setup:	
  1712                           
  1713                           	psect	intentry
  1714  0004                     __pintentry:	
  1715 ;; *************** function _ISR *****************
  1716 ;; Defined at:
  1717 ;;		line 55 in file "main.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;		None
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;		None
  1722 ;; Return value:  Size  Location     Type
  1723 ;;		None               void
  1724 ;; Registers used:
  1725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1733 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1734 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1735 ;;Total ram usage:        3 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:    1
  1738 ;; This function calls:
  1739 ;;		_getch
  1740 ;; This function is called by:
  1741 ;;		Interrupt level 1
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745  0004                     _ISR:	
  1746                           
  1747                           ;incstack = 0
  1748                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1749  0004  3180               	pagesel	$
  1750  0005  0020               	movlb	0	; select bank0
  1751  0006  087F               	movf	127,w
  1752  0007  00F2               	movwf	??_ISR+2
  1753                           
  1754                           ;main.c: 56: if (ADIF)
  1755  0008  1F11               	btfss	17,6	;volatile
  1756  0009  2825               	goto	i1l1109
  1757                           
  1758                           ;main.c: 57: {
  1759                           ;main.c: 58: ADON = 0;
  1760  000A  0021               	movlb	1	; select bank1
  1761  000B  101D               	bcf	29,0	;volatile
  1762                           
  1763                           ;main.c: 60: if (ADRES < CUTOFF_VOLTAGE)
  1764  000C  3009               	movlw	low (_CUTOFF_VOLTAGE| (0+32768))
  1765  000D  0084               	movwf	4
  1766  000E  3083               	movlw	high (_CUTOFF_VOLTAGE| (0+32768))
  1767  000F  0085               	movwf	5
  1768  0010  3F00               	moviw [0]fsr0
  1769  0011  00F0               	movwf	??_ISR
  1770  0012  3F01               	moviw [1]fsr0
  1771  0013  00F1               	movwf	??_ISR+1
  1772  0014  0871               	movf	??_ISR+1,w
  1773  0015  021C               	subwf	28,w	;volatile
  1774  0016  1D03               	skipz
  1775  0017  281A               	goto	u91_25
  1776  0018  0870               	movf	??_ISR,w
  1777  0019  021B               	subwf	27,w	;volatile
  1778  001A                     u91_25:	
  1779  001A  1803               	skipnc
  1780  001B  2820               	goto	i1l1103
  1781                           
  1782                           ;main.c: 61: {
  1783                           ;main.c: 62: batteryLow = 1;
  1784  001C  0020               	movlb	0	; select bank0
  1785  001D  01BC               	clrf	_batteryLow
  1786  001E  0ABC               	incf	_batteryLow,f
  1787                           
  1788                           ;main.c: 63: }
  1789  001F  2822               	goto	i1l1105
  1790  0020                     i1l1103:	
  1791                           
  1792                           ;main.c: 64: else
  1793                           ;main.c: 65: {
  1794                           ;main.c: 66: batteryLow = 0;
  1795  0020  0020               	movlb	0	; select bank0
  1796  0021  01BC               	clrf	_batteryLow
  1797  0022                     i1l1105:	
  1798                           
  1799                           ;main.c: 67: }
  1800                           ;main.c: 68: checkBattery = 1;
  1801  0022  01C1               	clrf	_checkBattery
  1802  0023  0AC1               	incf	_checkBattery,f
  1803                           
  1804                           ;main.c: 69: ADIF = 0;
  1805  0024  1311               	bcf	17,6	;volatile
  1806  0025                     i1l1109:	
  1807                           
  1808                           ;main.c: 70: }
  1809                           ;main.c: 71: if (RCIF)
  1810  0025  1E91               	btfss	17,5	;volatile
  1811  0026  2849               	goto	i1l92
  1812                           
  1813                           ;main.c: 72: {
  1814                           ;main.c: 73: rxchar = getch();
  1815  0027  3183  2302  3180   	fcall	_getch
  1816  002A  00F0               	movwf	??_ISR
  1817  002B  0870               	movf	??_ISR,w
  1818  002C  00F9               	movwf	_rxchar
  1819                           
  1820                           ;main.c: 74: if (packetCorrupt)
  1821  002D  0020               	movlb	0	; select bank0
  1822  002E  083E               	movf	_packetCorrupt,w
  1823  002F  1903               	btfsc	3,2
  1824  0030  2836               	goto	i1l1119
  1825                           
  1826                           ;main.c: 75: {
  1827                           ;main.c: 77: if (rxchar == 0x02)
  1828  0031  0879               	movf	_rxchar,w
  1829  0032  3A02               	xorlw	2
  1830  0033  1D03               	skipz
  1831  0034  2849               	goto	i1l92
  1832                           
  1833                           ;main.c: 78: {
  1834                           ;main.c: 80: packetCorrupt = 0;
  1835  0035  01BE               	clrf	_packetCorrupt
  1836  0036                     i1l1119:	
  1837                           ;main.c: 82: else
  1838                           ;main.c: 83: {
  1839                           ;main.c: 84: return;
  1840                           
  1841                           ;main.c: 81: }
  1842                           
  1843                           
  1844                           ;main.c: 85: }
  1845                           ;main.c: 86: }
  1846                           ;main.c: 87: packetBuffer[i] = rxchar;
  1847  0036  0879               	movf	_rxchar,w
  1848  0037  00F0               	movwf	??_ISR
  1849  0038  0878               	movf	_i,w
  1850  0039  3E36               	addlw	_packetBuffer& (0+255)
  1851  003A  0086               	movwf	6
  1852  003B  0187               	clrf	7
  1853  003C  0870               	movf	??_ISR,w
  1854  003D  0081               	movwf	1
  1855                           
  1856                           ;main.c: 88: i++;
  1857  003E  3001               	movlw	1
  1858  003F  00F0               	movwf	??_ISR
  1859  0040  0870               	movf	??_ISR,w
  1860  0041  07F8               	addwf	_i,f
  1861                           
  1862                           ;main.c: 89: if (i >= 6)
  1863  0042  3006               	movlw	6
  1864  0043  0278               	subwf	_i,w
  1865  0044  1C03               	skipc
  1866  0045  2849               	goto	i1l92
  1867                           
  1868                           ;main.c: 90: {
  1869                           ;main.c: 91: packetReceived = 1;
  1870  0046  01BF               	clrf	_packetReceived
  1871  0047  0ABF               	incf	_packetReceived,f
  1872                           
  1873                           ;main.c: 92: i = 0;
  1874  0048  01F8               	clrf	_i
  1875  0049                     i1l92:	
  1876  0049  0872               	movf	??_ISR+2,w
  1877  004A  00FF               	movwf	127
  1878  004B  0009               	retfie
  1879  004C                     __end_of_ISR:	
  1880                           
  1881                           	psect	text5
  1882  0302                     __ptext5:	
  1883 ;; *************** function _getch *****************
  1884 ;; Defined at:
  1885 ;;		line 15 in file "usart.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;		None
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;		None
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  1    wreg      unsigned char 
  1892 ;; Registers used:
  1893 ;;		wreg
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1903 ;;Total ram usage:        0 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; This function calls:
  1906 ;;		Nothing
  1907 ;; This function is called by:
  1908 ;;		_ISR
  1909 ;;		_getche
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           
  1914                           ;psect for function _getch
  1915  0302                     _getch:	
  1916  0302                     i1l174:	
  1917                           ;usart.c: 18: continue;
  1918                           
  1919                           ;usart.c: 17: while(!RCIF)
  1920                           
  1921                           ;incstack = 0
  1922                           ; Regs used in _getch: [wreg]
  1923                           
  1924  0302  0020               	movlb	0	; select bank0
  1925  0303  1E91               	btfss	17,5	;volatile
  1926  0304  2B02               	goto	i1l174
  1927                           
  1928                           ;usart.c: 19: return RCREG;
  1929  0305  0023               	movlb	3	; select bank3
  1930  0306  0819               	movf	25,w	;volatile
  1931  0307  0008               	return
  1932  0308                     __end_of_getch:	
  1933  007E                     btemp	set	126	;btemp
  1934  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    3
    Data        3
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80     22      36
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ?___awdiv	int  size(1) Largest target is 0


Critical Paths under _main in COMMON

    _main->___awdiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0    1165
                                              4 BANK0     18    18      0
                              _setup
                _checkBatteryVoltage
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     300
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _checkBatteryVoltage                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
                              _getch
 ---------------------------------------------------------------------------------
 (3) _getch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
   _checkBatteryVoltage
   ___awdiv

 _ISR (ROOT)
   _getch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       5       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     16      24       5       45.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      2E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      33      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Feb 11 20:07:09 2014

              _CUTOFF_VOLTAGE 0309                             _i 0078                   __CFG_CP$OFF 0000  
                ___awdiv@sign 0021                           l120 0110                           l130 0177  
                         l114 00DB                           l109 0239                           l144 022A  
                         l129 0150                           l146 0235                           l931 0094  
                         l923 007B                           l935 009C                           l961 0104  
                         l953 00DD                           l945 00C4                           l929 0090  
                         l971 0131                           l965 0112                           l957 00F9  
                         l949 00CF                           l983 0173                           l975 0149  
                         l969 012A                           l987 0189                           _GIE 005F  
                         l997 01B6                           l999 01BB                           u515 008B  
                         _ISR 0004                           u705 01C6                           u715 01E6  
                         u635 011B                           u725 01F7                           u645 013A  
                         u655 0161                           u835 029C                           u755 0244  
                         u685 0199                           u855 02A6                           u775 0258  
                         u695 01A7                           u865 02B0                           u875 02B8  
                         u795 0275         ??_checkBatteryVoltage 0073                  __CFG_BORV$LO 0000  
                         wreg 0009                  __CFG_LVP$OFF 0000                          ?_ISR 0070  
                        l1011 01ED                          l1021 022D                          l1005 01D6  
                        l1031 0249                          l1015 01FE                          l1025 023B  
                        l1043 0264                          l1035 0250                          l1027 023D  
                        l1039 025D                          l1065 0291                          l1091 02C8  
                        l1083 02B7                          l1075 0299                          l1059 0286  
                        l1077 02A5                          l1087 02C0                          _ADIE 048E  
                        _ADIF 008E                          _ADGO 04E9                          _ADON 04E8  
                        _LATA 010C                          _LATC 010E                          _PEIE 005E  
                        _RCIE 048D                          _RCIF 008D                          i1l92 0049  
                        _TXEN 0CF5                          _TXIF 008C                  __CFG_WRT$OFF 0000  
                        _main 0069                          fsr0h 0005                          fsr1h 0007  
                        fsr0l 0004                          indf1 0001                          fsr1l 0006  
                        btemp 007E                 __CFG_BOREN$ON 0000                          start 004C  
               __CFG_IESO$OFF 0000        __end_of_CUTOFF_VOLTAGE 030B           __CFG_PLLEN$DISABLED 0000  
               __CFG_MCLRE$ON 0000                         ??_ISR 0070                         ?_main 0070  
             __end_of___awdiv 02CF                         _ADRES 009B                 __CFG_WDTE$OFF 0000  
             ___awdiv@divisor 0073                         i1l174 0302               ___awdiv@counter 0020  
                       _RCREG 0199                         _RCSTA 019D                         _SPBRG 019B  
                       u91_25 001A                         _TXREG 019A                         _TXSTA 019E  
               __CFG_PWRTE$ON 0000                __CFG_FCMEN$OFF 0000                         _getch 0302  
                       _setup 02CF                         main@x 0032                         main@y 0034  
                main@pwmCount 0030                         status 0003                         wtemp0 007E  
             __initialization 004E                  __end_of_main 027B                __CFG_LPBOR$OFF 0000  
                      ??_main 0024           __CFG_USBLSCLK$48MHz 0000                        ?_getch 0070  
            ___awdiv@dividend 0075                        ?_setup 0070                        _ANSELA 018C  
                      _ANSELC 018E                 _packetCorrupt 003E                        i1l1103 0020  
                      i1l1105 0022                        i1l1109 0025                        i1l1119 0036  
                      _TRISC4 0474                        _TRISC5 0475                     ??___awdiv 0077  
              __CFG_STVREN$ON 0000              ___awdiv@quotient 0022                        _rxchar 0079  
                _checkBattery 0041       __end_of__initialization 0066                __pcstackCOMMON 0070  
                __pidataBANK0 030C                 __end_of_getch 0308                 __end_of_setup 02FC  
                     ??_getch 0070                       ??_setup 0073                    __pbssBANK0 0036  
                  _batteryLow 003C                    __pmaintext 0069               __CFG_PLLMULT$3x 0000  
                  __pintentry 0004   __end_of_checkBatteryVoltage 0302                _packetReceived 003F  
                  __stringtab 0308                       ___awdiv 027B                       __ptext1 027B  
                     __ptext2 02FC                       __ptext3 02CF                       __ptext5 0302  
                     _leftPWM 003D                       _leftDir 0042                  __size_of_ISR 0048  
        end_of_initialization 0066              __CFG_FOSC$INTOSC 0000                     _TRISAbits 008C  
                   _TRISCbits 008E           start_initialization 004E                   __end_of_ISR 004C  
                _packetBuffer 0036                   __pdataBANK0 0041                   __pbssCOMMON 0078  
               __pcstackBANK0 0020              main@rightPWMtemp 002A                      ?___awdiv 0073  
                   __pstrings 0308               main@leftPWMtemp 0028  __size_of_checkBatteryVoltage 0006  
              __size_of_getch 0006                __size_of_setup 002D                      _LATAbits 010C  
                    _LATCbits 010E              _SPEED_INCREMENTS 030B                    _ADCON0bits 009D  
                  _ADCON1bits 009E              __size_of___awdiv 0054            __end_of__stringtab 0309  
                  _ANSELAbits 018C                 __size_of_main 0212                      _rightPWM 0040  
                    _rightDir 0043                      main@xAbs 002C                      main@yAbs 002E  
                    intlevel1 0000             __CFG_CLKOUTEN$OFF 0000                    _OSCCONbits 0099  
         _checkBatteryVoltage 02FC           __CFG_CPUDIV$CLKDIV2 0000      __end_of_SPEED_INCREMENTS 030C  
        ?_checkBatteryVoltage 0070  
